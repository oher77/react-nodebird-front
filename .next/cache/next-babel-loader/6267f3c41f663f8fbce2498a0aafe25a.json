{"ast":null,"code":"import { all, put, fork, delay, takeLatest } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, LOG_OUT_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE } from '../reducers/user';\n\nfunction logInAPI(data) {\n  return axios.post('/api/login', data); // 서버로 요청하는 로그인을 보낸다.\n}\n\nfunction* logIn(action) {\n  // 실패할 경우를 대비해 tyr catch로 감싼다.\n  try {\n    // action.data를 logInAPI함수에 매개변수로 넣는다 logInAPI(action.data)의 의미. call()의 특징이다.\n    // 여기서 잠깐! call과 fork의 차이\n    // call은 값을 받을때 까지 기다렸다가 (함수)를 호출하고(블로킹)\n    // fork는 그냥 바로 (함수)를 호출한다.(논블로킹)\n    // const result = yield call(logInAPI, action.data)\n    yield delay(1000);\n    yield put({\n      type: LOG_IN_SUCCESS,\n      data: action.data // data: result.data\n      // 결과를 받아서 이런 식으로 처리\n\n    });\n  } catch (err) {\n    yield put({\n      // put은 dispatch 개념\n      type: LOG_IN_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction logOutAPI() {\n  return axios.post('/api/logout');\n}\n\nfunction* logOut() {\n  // 실패할 경우를 대비해 tyr catch로 감싼다.\n  try {\n    yield delay(1000);\n    yield put({\n      type: LOG_OUT_SUCCESS // data: result.data\n      // 결과를 받아서 이런 식으로 처리\n\n    });\n  } catch (err) {\n    yield put({\n      // put은 dispatch 개념\n      type: LOG_OUT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction signUpAPI() {\n  return axios.post('/api/logout');\n}\n\nfunction* signUp() {\n  // 실패할 경우를 대비해 tyr catch로 감싼다.\n  try {\n    yield delay(1000);\n    yield put({\n      type: SIGN_UP_SUCCESS // data: result.data\n      // 결과를 받아서 이런 식으로 처리\n\n    });\n  } catch (err) {\n    yield put({\n      // put은 dispatch 개념\n      type: SIGN_UP_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchLogIn() {\n  yield takeLatest(LOG_IN_REQUEST, logIn);\n}\n\nfunction* watchLogOut() {\n  yield takeLatest(LOG_OUT_REQUEST, logOut);\n}\n\nfunction* watchSignUp() {\n  yield takeLatest(SIGN_UP_REQUEST, signUp);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogIn), fork(watchLogOut), fork(watchSignUp)]);\n}","map":{"version":3,"sources":["/Users/heruse/Study/React/react-nodebird/prepare/front/sagas/user.js"],"names":["all","put","fork","delay","takeLatest","axios","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","LOG_OUT_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","logInAPI","data","post","logIn","action","type","err","error","response","logOutAPI","logOut","signUpAPI","signUp","watchLogIn","watchLogOut","watchSignUp","userSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,GAAd,EAAmBC,IAAnB,EAAyBC,KAAzB,EAAgCC,UAAhC,QAAkD,oBAAlD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,cAAT,EAAyBC,cAAzB,EAAyCC,cAAzC,EACEC,eADF,EACmBC,eADnB,EACoCC,eADpC,EAEEC,eAFF,EAEmBC,eAFnB,EAEoCC,eAFpC,QAGO,kBAHP;;AAKA,SAASC,QAAT,CAAkBC,IAAlB,EAAwB;AACtB,SAAOX,KAAK,CAACY,IAAN,CAAW,YAAX,EAAyBD,IAAzB,CAAP,CADsB,CACgB;AACvC;;AAED,UAAUE,KAAV,CAAgBC,MAAhB,EAAwB;AACtB;AACA,MAAI;AACF;AACA;AACA;AACA;AACA;AACA,UAAMhB,KAAK,CAAC,IAAD,CAAX;AACA,UAAMF,GAAG,CAAC;AACRmB,MAAAA,IAAI,EAAEb,cADE;AAERS,MAAAA,IAAI,EAAEG,MAAM,CAACH,IAFL,CAGR;AACA;;AAJQ,KAAD,CAAT;AAMD,GAbD,CAaE,OAAOK,GAAP,EAAY;AACZ,UAAMpB,GAAG,CAAC;AAAE;AACVmB,MAAAA,IAAI,EAAEZ,cADE;AAERc,MAAAA,KAAK,EAAED,GAAG,CAACE,QAAJ,CAAaP;AAFZ,KAAD,CAAT;AAID;AACF;;AACD,SAASQ,SAAT,GAAqB;AACnB,SAAOnB,KAAK,CAACY,IAAN,CAAW,aAAX,CAAP;AACD;;AAED,UAAUQ,MAAV,GAAmB;AACjB;AACA,MAAI;AACF,UAAMtB,KAAK,CAAC,IAAD,CAAX;AACA,UAAMF,GAAG,CAAC;AACRmB,MAAAA,IAAI,EAAEV,eADE,CAER;AACA;;AAHQ,KAAD,CAAT;AAKD,GAPD,CAOE,OAAOW,GAAP,EAAY;AACZ,UAAMpB,GAAG,CAAC;AAAE;AACVmB,MAAAA,IAAI,EAAET,eADE;AAERW,MAAAA,KAAK,EAAED,GAAG,CAACE,QAAJ,CAAaP;AAFZ,KAAD,CAAT;AAID;AACF;;AAED,SAASU,SAAT,GAAqB;AACnB,SAAOrB,KAAK,CAACY,IAAN,CAAW,aAAX,CAAP;AACD;;AAED,UAAUU,MAAV,GAAmB;AACjB;AACA,MAAI;AACF,UAAMxB,KAAK,CAAC,IAAD,CAAX;AACA,UAAMF,GAAG,CAAC;AACRmB,MAAAA,IAAI,EAAEP,eADE,CAER;AACA;;AAHQ,KAAD,CAAT;AAKD,GAPD,CAOE,OAAOQ,GAAP,EAAY;AACZ,UAAMpB,GAAG,CAAC;AAAE;AACVmB,MAAAA,IAAI,EAAEN,eADE;AAERQ,MAAAA,KAAK,EAAED,GAAG,CAACE,QAAJ,CAAaP;AAFZ,KAAD,CAAT;AAID;AACF;;AAED,UAAUY,UAAV,GAAuB;AACrB,QAAMxB,UAAU,CAACE,cAAD,EAAiBY,KAAjB,CAAhB;AACD;;AACD,UAAUW,WAAV,GAAwB;AACtB,QAAMzB,UAAU,CAACK,eAAD,EAAkBgB,MAAlB,CAAhB;AACD;;AACD,UAAUK,WAAV,GAAwB;AACtB,QAAM1B,UAAU,CAACQ,eAAD,EAAkBe,MAAlB,CAAhB;AACD;;AAED,eAAe,UAAUI,QAAV,GAAqB;AAClC,QAAM/B,GAAG,CAAC,CACRE,IAAI,CAAC0B,UAAD,CADI,EAER1B,IAAI,CAAC2B,WAAD,CAFI,EAGR3B,IAAI,CAAC4B,WAAD,CAHI,CAAD,CAAT;AAKD","sourcesContent":["import { all, put, fork, delay, takeLatest } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE,\n  LOG_OUT_REQUEST, LOG_OUT_SUCCESS, LOG_OUT_FAILURE,\n  SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE,\n} from '../reducers/user';\n\nfunction logInAPI(data) {\n  return axios.post('/api/login', data);// 서버로 요청하는 로그인을 보낸다.\n}\n\nfunction* logIn(action) {\n  // 실패할 경우를 대비해 tyr catch로 감싼다.\n  try {\n    // action.data를 logInAPI함수에 매개변수로 넣는다 logInAPI(action.data)의 의미. call()의 특징이다.\n    // 여기서 잠깐! call과 fork의 차이\n    // call은 값을 받을때 까지 기다렸다가 (함수)를 호출하고(블로킹)\n    // fork는 그냥 바로 (함수)를 호출한다.(논블로킹)\n    // const result = yield call(logInAPI, action.data)\n    yield delay(1000);\n    yield put({\n      type: LOG_IN_SUCCESS,\n      data: action.data,\n      // data: result.data\n      // 결과를 받아서 이런 식으로 처리\n    });\n  } catch (err) {\n    yield put({ // put은 dispatch 개념\n      type: LOG_IN_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\nfunction logOutAPI() {\n  return axios.post('/api/logout');\n}\n\nfunction* logOut() {\n  // 실패할 경우를 대비해 tyr catch로 감싼다.\n  try {\n    yield delay(1000);\n    yield put({\n      type: LOG_OUT_SUCCESS,\n      // data: result.data\n      // 결과를 받아서 이런 식으로 처리\n    });\n  } catch (err) {\n    yield put({ // put은 dispatch 개념\n      type: LOG_OUT_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\nfunction signUpAPI() {\n  return axios.post('/api/logout');\n}\n\nfunction* signUp() {\n  // 실패할 경우를 대비해 tyr catch로 감싼다.\n  try {\n    yield delay(1000);\n    yield put({\n      type: SIGN_UP_SUCCESS,\n      // data: result.data\n      // 결과를 받아서 이런 식으로 처리\n    });\n  } catch (err) {\n    yield put({ // put은 dispatch 개념\n      type: SIGN_UP_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\nfunction* watchLogIn() {\n  yield takeLatest(LOG_IN_REQUEST, logIn);\n}\nfunction* watchLogOut() {\n  yield takeLatest(LOG_OUT_REQUEST, logOut);\n}\nfunction* watchSignUp() {\n  yield takeLatest(SIGN_UP_REQUEST, signUp);\n}\n\nexport default function* userSaga() {\n  yield all([\n    fork(watchLogIn),\n    fork(watchLogOut),\n    fork(watchSignUp),\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}