{"ast":null,"code":"import { createWrapper } from 'next-redux-wrapper';\nimport { createStore, compose, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport createSagaMiddleware from 'redux-saga';\nimport reducer from '../reducers';\nimport rootSaga from '../sagas'; // 3단 고차함수로 인자들을 매개변수들로 제공해주기 때문에 그걸로 필요한 middleware를 만들어서 쓸 수 있다.\n\nvar loggerMiddleware = function loggerMiddleware(_ref) {\n  var dispatch = _ref.dispatch,\n      gesState = _ref.gesState;\n  return function (next) {\n    return function (action) {\n      // if (typeof action === 'function') {\n      //     return action(dispatch, getStore);\n      // }\n      console.log(action); // 액션이 있을 때마다 redux dev tool 처럼 액션명을 콘솔에 찍어준다.\n\n      return next(action);\n    };\n  };\n};\n\nvar configureStore = function configureStore() {\n  var sagaMiddleware = createSagaMiddleware();\n  var middlewares = [sagaMiddleware, loggerMiddleware];\n  var enhancer = false ? compose(applyMiddleware.apply(void 0, middlewares)) : composeWithDevTools(applyMiddleware.apply(void 0, middlewares));\n  var store = createStore(reducer, enhancer);\n  store.sagaTask = sagaMiddleware.run(rootSaga);\n  return store;\n}; // 두번째 인자는 옵션 객체\n// debug가 true면 redux에 대해 좀 더 자세한 설명이 나오기 때문에 개발(deveolopment)할때는 debug를 true로 두는 게 코딩할 때 편하다.\n\n\nvar wrapper = createWrapper(configureStore, {\n  debug: true\n});\nexport default wrapper;","map":{"version":3,"sources":["/Users/heruse/Study/React/react-nodebird/prepare/front/sotre/configureStore.js"],"names":["createWrapper","createStore","compose","applyMiddleware","composeWithDevTools","createSagaMiddleware","reducer","rootSaga","loggerMiddleware","dispatch","gesState","next","action","console","log","configureStore","sagaMiddleware","middlewares","enhancer","store","sagaTask","run","wrapper","debug"],"mappings":"AAAA,SAASA,aAAT,QAA8B,oBAA9B;AACA,SAASC,WAAT,EAAsBC,OAAtB,EAA+BC,eAA/B,QAAsD,OAAtD;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,OAAOC,oBAAP,MAAiC,YAAjC;AAEA,OAAOC,OAAP,MAAoB,aAApB;AACA,OAAOC,QAAP,MAAqB,UAArB,C,CAEA;;AACA,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB;AAAA,MAAGC,QAAH,QAAGA,QAAH;AAAA,MAAaC,QAAb,QAAaA,QAAb;AAAA,SAA4B,UAACC,IAAD;AAAA,WAAU,UAACC,MAAD,EAAY;AACzE;AACA;AACA;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ,EAJyE,CAIrD;;AAEpB,aAAOD,IAAI,CAACC,MAAD,CAAX;AACD,KAPoD;AAAA,GAA5B;AAAA,CAAzB;;AASA,IAAMG,cAAc,GAAG,SAAjBA,cAAiB,GAAM;AAC3B,MAAMC,cAAc,GAAGX,oBAAoB,EAA3C;AACA,MAAMY,WAAW,GAAG,CAACD,cAAD,EAAiBR,gBAAjB,CAApB;AACA,MAAMU,QAAQ,GAAG,QACbhB,OAAO,CAACC,eAAe,MAAf,SAAmBc,WAAnB,CAAD,CADM,GAEbb,mBAAmB,CAACD,eAAe,MAAf,SAAmBc,WAAnB,CAAD,CAFvB;AAGA,MAAME,KAAK,GAAGlB,WAAW,CAACK,OAAD,EAAUY,QAAV,CAAzB;AACAC,EAAAA,KAAK,CAACC,QAAN,GAAiBJ,cAAc,CAACK,GAAf,CAAmBd,QAAnB,CAAjB;AACA,SAAOY,KAAP;AACD,CATD,C,CAWA;AACA;;;AACA,IAAMG,OAAO,GAAGtB,aAAa,CAACe,cAAD,EAAiB;AAC5CQ,EAAAA,KAAK;AADuC,CAAjB,CAA7B;AAIA,eAAeD,OAAf","sourcesContent":["import { createWrapper } from 'next-redux-wrapper';\nimport { createStore, compose, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport createSagaMiddleware from 'redux-saga';\n\nimport reducer from '../reducers';\nimport rootSaga from '../sagas';\n\n// 3단 고차함수로 인자들을 매개변수들로 제공해주기 때문에 그걸로 필요한 middleware를 만들어서 쓸 수 있다.\nconst loggerMiddleware = ({ dispatch, gesState }) => (next) => (action) => {\n  // if (typeof action === 'function') {\n  //     return action(dispatch, getStore);\n  // }\n  console.log(action);// 액션이 있을 때마다 redux dev tool 처럼 액션명을 콘솔에 찍어준다.\n\n  return next(action);\n};\n\nconst configureStore = () => {\n  const sagaMiddleware = createSagaMiddleware();\n  const middlewares = [sagaMiddleware, loggerMiddleware];\n  const enhancer = process.env.NODE_ENV === 'production'\n    ? compose(applyMiddleware(...middlewares))\n    : composeWithDevTools(applyMiddleware(...middlewares));\n  const store = createStore(reducer, enhancer);\n  store.sagaTask = sagaMiddleware.run(rootSaga);\n  return store;\n};\n\n// 두번째 인자는 옵션 객체\n// debug가 true면 redux에 대해 좀 더 자세한 설명이 나오기 때문에 개발(deveolopment)할때는 debug를 true로 두는 게 코딩할 때 편하다.\nconst wrapper = createWrapper(configureStore, {\n  debug: process.env.NODE_ENV === 'development',\n});\n\nexport default wrapper;\n"]},"metadata":{},"sourceType":"module"}