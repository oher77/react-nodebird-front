{"ast":null,"code":"import { all, put, fork, takeLatest, delay } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST } from '../reducers/post';\n\nfunction addPostAPI(data) {\n  return axios.post(`/api/post/${data.postId}/comment`, data);\n} // action에서 data꺼내서 addPostAPI(data)로 보낸다.\n\n\nfunction* addPost(action) {\n  // 실패할 경우를 대비해 tyr catch로 감싼다.\n  try {\n    // const result = yield call(addPostAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: ADD_POST_SUCCESS // data: result.data\n\n    }); // 결과를 받아서 이런 식으로 처리\n  } catch (err) {\n    yield put({\n      // put은 dispatch 개념\n      type: ADD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction* addComment(action) {\n  // 실패할 경우를 대비해 tyr catch로 감싼다.\n  try {\n    // const result = yield call(addPostAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: ADD_COMMENT_SUCCESS // data: result.data\n\n    }); // 결과를 받아서 이런 식으로 처리\n  } catch (err) {\n    yield put({\n      // put은 dispatch 개념\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  // takeLatest 마우스를 여러번 클릭했을때 모든 이벤트를 Request 하는 것을 방지하기 위해 제일 마지막 이젠트만 보낸다.\n  yield takeLatest(ADD_POST_REQUEST, addPost, 2000);\n}\n\nfunction* watchAddComment() {\n  // takeLatest 마우스를 여러번 클릭했을때 모든 이벤트를 Request 하는 것을 방지하기 위해 제일 마지막 이젠트만 보낸다.\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment, 2000);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchAddComment)]);\n}","map":{"version":3,"sources":["/Users/heruse/Study/React/react-nodebird/prepare/front/sagas/post.js"],"names":["all","put","fork","takeLatest","delay","axios","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","addPostAPI","data","post","postId","addPost","action","type","err","response","addComment","watchAddPost","watchAddComment","postSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,GAAd,EAAmBC,IAAnB,EAAyBC,UAAzB,EAAqCC,KAArC,QAAkD,oBAAlD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,gBAAT,EAA2BC,gBAA3B,EAA6CC,gBAA7C,EACEC,mBADF,EACuBC,mBADvB,EAC4CC,mBAD5C,QAEO,kBAFP;;AAIA,SAASC,UAAT,CAAoBC,IAApB,EAA0B;AACxB,SAAOR,KAAK,CAACS,IAAN,CAAY,aAAYD,IAAI,CAACE,MAAO,UAApC,EAA+CF,IAA/C,CAAP;AACD,C,CACD;;;AACA,UAAUG,OAAV,CAAkBC,MAAlB,EAA0B;AACxB;AACA,MAAI;AACF;AACA,UAAMb,KAAK,CAAC,IAAD,CAAX;AACA,UAAMH,GAAG,CAAC;AACRiB,MAAAA,IAAI,EAAEZ,gBADE,CAER;;AAFQ,KAAD,CAAT,CAHE,CAME;AACL,GAPD,CAOE,OAAOa,GAAP,EAAY;AACZ,UAAMlB,GAAG,CAAC;AAAE;AACViB,MAAAA,IAAI,EAAEX,gBADE;AAERM,MAAAA,IAAI,EAAEM,GAAG,CAACC,QAAJ,CAAaP;AAFX,KAAD,CAAT;AAID;AACF;;AACD,UAAUQ,UAAV,CAAqBJ,MAArB,EAA6B;AAC3B;AACA,MAAI;AACF;AACA,UAAMb,KAAK,CAAC,IAAD,CAAX;AACA,UAAMH,GAAG,CAAC;AACRiB,MAAAA,IAAI,EAAET,mBADE,CAER;;AAFQ,KAAD,CAAT,CAHE,CAME;AACL,GAPD,CAOE,OAAOU,GAAP,EAAY;AACZ,UAAMlB,GAAG,CAAC;AAAE;AACViB,MAAAA,IAAI,EAAER,mBADE;AAERG,MAAAA,IAAI,EAAEM,GAAG,CAACC,QAAJ,CAAaP;AAFX,KAAD,CAAT;AAID;AACF;;AAED,UAAUS,YAAV,GAAyB;AACvB;AACA,QAAMnB,UAAU,CAACK,gBAAD,EAAmBQ,OAAnB,EAA4B,IAA5B,CAAhB;AACD;;AACD,UAAUO,eAAV,GAA4B;AAC1B;AACA,QAAMpB,UAAU,CAACQ,mBAAD,EAAsBU,UAAtB,EAAkC,IAAlC,CAAhB;AACD;;AACD,eAAe,UAAUG,QAAV,GAAqB;AAClC,QAAMxB,GAAG,CAAC,CACRE,IAAI,CAACoB,YAAD,CADI,EAERpB,IAAI,CAACqB,eAAD,CAFI,CAAD,CAAT;AAID","sourcesContent":["import { all, put, fork, takeLatest, delay } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST,\n  ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST }\n  from '../reducers/post';\n\nfunction addPostAPI(data) {\n  return axios.post(`/api/post/${data.postId}/comment`, data);\n}\n// action에서 data꺼내서 addPostAPI(data)로 보낸다.\nfunction* addPost(action) {\n  // 실패할 경우를 대비해 tyr catch로 감싼다.\n  try {\n    // const result = yield call(addPostAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      // data: result.data\n    }); // 결과를 받아서 이런 식으로 처리\n  } catch (err) {\n    yield put({ // put은 dispatch 개념\n      type: ADD_POST_FAILURE,\n      data: err.response.data,\n    });\n  }\n}\nfunction* addComment(action) {\n  // 실패할 경우를 대비해 tyr catch로 감싼다.\n  try {\n    // const result = yield call(addPostAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      // data: result.data\n    }); // 결과를 받아서 이런 식으로 처리\n  } catch (err) {\n    yield put({ // put은 dispatch 개념\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data,\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  // takeLatest 마우스를 여러번 클릭했을때 모든 이벤트를 Request 하는 것을 방지하기 위해 제일 마지막 이젠트만 보낸다.\n  yield takeLatest(ADD_POST_REQUEST, addPost, 2000);\n}\nfunction* watchAddComment() {\n  // takeLatest 마우스를 여러번 클릭했을때 모든 이벤트를 Request 하는 것을 방지하기 위해 제일 마지막 이젠트만 보낸다.\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment, 2000);\n}\nexport default function* postSaga() {\n  yield all([\n    fork(watchAddPost),\n    fork(watchAddComment),\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}