{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(logIn),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(logOut),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(signUp),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(watchLogIn),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(watchLogOut),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(watchSignUp),\n    _marked7 = /*#__PURE__*/_regeneratorRuntime.mark(userSaga);\n\nimport { all, put, fork, delay, takeLatest } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, LOG_OUT_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE } from '../reducers/user';\n\nfunction logInAPI(data) {\n  return axios.post('/api/login', data); // 서버로 요청하는 로그인을 보낸다.\n}\n\nfunction logIn(action) {\n  return _regeneratorRuntime.wrap(function logIn$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context.next = 5;\n          return put({\n            type: LOG_IN_SUCCESS,\n            data: action.data // data: result.data\n            // 결과를 받아서 이런 식으로 처리\n\n          });\n\n        case 5:\n          _context.next = 11;\n          break;\n\n        case 7:\n          _context.prev = 7;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 11;\n          return put({\n            // put은 dispatch 개념\n            type: LOG_IN_FAILURE,\n            error: _context.t0.response.data\n          });\n\n        case 11:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 7]]);\n}\n\nfunction logOutAPI() {\n  return axios.post('/api/logout');\n}\n\nfunction logOut() {\n  return _regeneratorRuntime.wrap(function logOut$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context2.next = 5;\n          return put({\n            type: LOG_OUT_SUCCESS // data: result.data\n            // 결과를 받아서 이런 식으로 처리\n\n          });\n\n        case 5:\n          _context2.next = 11;\n          break;\n\n        case 7:\n          _context2.prev = 7;\n          _context2.t0 = _context2[\"catch\"](0);\n          _context2.next = 11;\n          return put({\n            // put은 dispatch 개념\n            type: LOG_OUT_FAILURE,\n            error: _context2.t0.response.data\n          });\n\n        case 11:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 7]]);\n}\n\nfunction signUpAPI() {\n  return axios.post('/api/logout');\n}\n\nfunction signUp() {\n  return _regeneratorRuntime.wrap(function signUp$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context3.next = 5;\n          return put({\n            type: SIGN_UP_SUCCESS // data: result.data\n            // 결과를 받아서 이런 식으로 처리\n\n          });\n\n        case 5:\n          _context3.next = 11;\n          break;\n\n        case 7:\n          _context3.prev = 7;\n          _context3.t0 = _context3[\"catch\"](0);\n          _context3.next = 11;\n          return put({\n            // put은 dispatch 개념\n            type: SIGN_UP_FAILURE,\n            error: _context3.t0.response.data\n          });\n\n        case 11:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 7]]);\n}\n\nfunction watchLogIn() {\n  return _regeneratorRuntime.wrap(function watchLogIn$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest(LOG_IN_REQUEST, logIn);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nfunction watchLogOut() {\n  return _regeneratorRuntime.wrap(function watchLogOut$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return takeLatest(LOG_OUT_REQUEST, logOut);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}\n\nfunction watchSignUp() {\n  return _regeneratorRuntime.wrap(function watchSignUp$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return takeLatest(SIGN_UP_REQUEST, signUp);\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n}\n\nexport default function userSaga() {\n  return _regeneratorRuntime.wrap(function userSaga$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.next = 2;\n          return all([fork(watchLogIn), fork(watchLogOut), fork(watchSignUp)]);\n\n        case 2:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7);\n}","map":{"version":3,"sources":["/Users/heruse/Study/React/react-nodebird/prepare/front/sagas/user.js"],"names":["logIn","logOut","signUp","watchLogIn","watchLogOut","watchSignUp","userSaga","all","put","fork","delay","takeLatest","axios","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","LOG_OUT_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","logInAPI","data","post","action","type","error","response","logOutAPI","signUpAPI"],"mappings":";;oDAWUA,K;qDA0BAC,M;qDAqBAC,M;qDAiBAC,U;qDAGAC,W;qDAGAC,W;qDAIeC,Q;;AArFzB,SAASC,GAAT,EAAcC,GAAd,EAAmBC,IAAnB,EAAyBC,KAAzB,EAAgCC,UAAhC,QAAkD,oBAAlD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,cAAT,EAAyBC,cAAzB,EAAyCC,cAAzC,EACEC,eADF,EACmBC,eADnB,EACoCC,eADpC,EAEEC,eAFF,EAEmBC,eAFnB,EAEoCC,eAFpC,QAGO,kBAHP;;AAKA,SAASC,QAAT,CAAkBC,IAAlB,EAAwB;AACtB,SAAOX,KAAK,CAACY,IAAN,CAAW,YAAX,EAAyBD,IAAzB,CAAP,CADsB,CACgB;AACvC;;AAED,SAAUvB,KAAV,CAAgByB,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQI,iBAAMf,KAAK,CAAC,IAAD,CAAX;;AARJ;AAAA;AASI,iBAAMF,GAAG,CAAC;AACRkB,YAAAA,IAAI,EAAEZ,cADE;AAERS,YAAAA,IAAI,EAAEE,MAAM,CAACF,IAFL,CAGR;AACA;;AAJQ,WAAD,CAAT;;AATJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAgBI,iBAAMf,GAAG,CAAC;AAAE;AACVkB,YAAAA,IAAI,EAAEX,cADE;AAERY,YAAAA,KAAK,EAAE,YAAIC,QAAJ,CAAaL;AAFZ,WAAD,CAAT;;AAhBJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAsBA,SAASM,SAAT,GAAqB;AACnB,SAAOjB,KAAK,CAACY,IAAN,CAAW,aAAX,CAAP;AACD;;AAED,SAAUvB,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGI,iBAAMS,KAAK,CAAC,IAAD,CAAX;;AAHJ;AAAA;AAII,iBAAMF,GAAG,CAAC;AACRkB,YAAAA,IAAI,EAAET,eADE,CAER;AACA;;AAHQ,WAAD,CAAT;;AAJJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAUI,iBAAMT,GAAG,CAAC;AAAE;AACVkB,YAAAA,IAAI,EAAER,eADE;AAERS,YAAAA,KAAK,EAAE,aAAIC,QAAJ,CAAaL;AAFZ,WAAD,CAAT;;AAVJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAiBA,SAASO,SAAT,GAAqB;AACnB,SAAOlB,KAAK,CAACY,IAAN,CAAW,aAAX,CAAP;AACD;;AAED,SAAUtB,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGI,iBAAMQ,KAAK,CAAC,IAAD,CAAX;;AAHJ;AAAA;AAII,iBAAMF,GAAG,CAAC;AACRkB,YAAAA,IAAI,EAAEN,eADE,CAER;AACA;;AAHQ,WAAD,CAAT;;AAJJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAUI,iBAAMZ,GAAG,CAAC;AAAE;AACVkB,YAAAA,IAAI,EAAEL,eADE;AAERM,YAAAA,KAAK,EAAE,aAAIC,QAAJ,CAAaL;AAFZ,WAAD,CAAT;;AAVJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAiBA,SAAUpB,UAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMQ,UAAU,CAACE,cAAD,EAAiBb,KAAjB,CAAhB;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAGA,SAAUI,WAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMO,UAAU,CAACK,eAAD,EAAkBf,MAAlB,CAAhB;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAGA,SAAUI,WAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMM,UAAU,CAACQ,eAAD,EAAkBjB,MAAlB,CAAhB;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,eAAe,SAAUI,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACb,iBAAMC,GAAG,CAAC,CACRE,IAAI,CAACN,UAAD,CADI,EAERM,IAAI,CAACL,WAAD,CAFI,EAGRK,IAAI,CAACJ,WAAD,CAHI,CAAD,CAAT;;AADa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { all, put, fork, delay, takeLatest } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE,\n  LOG_OUT_REQUEST, LOG_OUT_SUCCESS, LOG_OUT_FAILURE,\n  SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE,\n} from '../reducers/user';\n\nfunction logInAPI(data) {\n  return axios.post('/api/login', data);// 서버로 요청하는 로그인을 보낸다.\n}\n\nfunction* logIn(action) {\n  // 실패할 경우를 대비해 tyr catch로 감싼다.\n  try {\n    // action.data를 logInAPI함수에 매개변수로 넣는다 logInAPI(action.data)의 의미. call()의 특징이다.\n    // 여기서 잠깐! call과 fork의 차이\n    // call은 값을 받을때 까지 기다렸다가 (함수)를 호출하고(블로킹)\n    // fork는 그냥 바로 (함수)를 호출한다.(논블로킹)\n    // const result = yield call(logInAPI, action.data)\n    yield delay(1000);\n    yield put({\n      type: LOG_IN_SUCCESS,\n      data: action.data,\n      // data: result.data\n      // 결과를 받아서 이런 식으로 처리\n    });\n  } catch (err) {\n    yield put({ // put은 dispatch 개념\n      type: LOG_IN_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\nfunction logOutAPI() {\n  return axios.post('/api/logout');\n}\n\nfunction* logOut() {\n  // 실패할 경우를 대비해 tyr catch로 감싼다.\n  try {\n    yield delay(1000);\n    yield put({\n      type: LOG_OUT_SUCCESS,\n      // data: result.data\n      // 결과를 받아서 이런 식으로 처리\n    });\n  } catch (err) {\n    yield put({ // put은 dispatch 개념\n      type: LOG_OUT_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\nfunction signUpAPI() {\n  return axios.post('/api/logout');\n}\n\nfunction* signUp() {\n  // 실패할 경우를 대비해 tyr catch로 감싼다.\n  try {\n    yield delay(1000);\n    yield put({\n      type: SIGN_UP_SUCCESS,\n      // data: result.data\n      // 결과를 받아서 이런 식으로 처리\n    });\n  } catch (err) {\n    yield put({ // put은 dispatch 개념\n      type: SIGN_UP_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\nfunction* watchLogIn() {\n  yield takeLatest(LOG_IN_REQUEST, logIn);\n}\nfunction* watchLogOut() {\n  yield takeLatest(LOG_OUT_REQUEST, logOut);\n}\nfunction* watchSignUp() {\n  yield takeLatest(SIGN_UP_REQUEST, signUp);\n}\n\nexport default function* userSaga() {\n  yield all([\n    fork(watchLogIn),\n    fork(watchLogOut),\n    fork(watchSignUp),\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}